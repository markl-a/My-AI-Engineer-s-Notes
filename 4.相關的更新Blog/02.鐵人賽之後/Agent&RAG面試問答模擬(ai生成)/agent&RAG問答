1. https://blog.csdn.net/m0_49134108/article/details/138279872

2. https://lazypro.medium.com/%E5%81%9A%E4%B8%80%E5%80%8B%E5%8B%99%E5%AF%A6%E7%9A%84rag-pragmatic-rag-65fc63647c51

3. https://www.bilibili.com/video/BV12ZsseqEDe/?spm_id_from=333.788.recommend_more_video.15&vd_source=ecc061b6fc98656d5a0fffe99b39620a

我參加 LLM 應用開發工作坊的三個重點收穫（RAG 比原本想的還有趣！）
4. https://tw.alphacamp.co/blog/my-three-key-takeaways-from-the-alpha-camp-and-ihower-llm-application-development-workshop

大模型面经之Agent介绍，一文搞懂agent老大难问题
5.https://blog.csdn.net/m0_57081622/article/details/139739035

大模型应用（十一）一文搞懂RAG，原理，流程，最佳实践
6.https://juejin.cn/post/7385382028990414875

Agentic RAG 与图任务编排
7.http://www.rpa-cn.com/zuixinzixun/AIshijiao/2024-06-19/4653.html

TOP3大厂大模型相关面试经验
8.https://www.nowcoder.com/feed/main/detail/cbdcfd84aa2b4232954d8af921154f80

AI Agent 跟 RAG 學習摘要紀錄
9.https://medium.com/@chinyiliao/ai-agent-%E8%B7%9F-rag-%E5%AD%B8%E7%BF%92%E6%91%98%E8%A6%81%E7%B4%80%E9%8C%84-5192019eb842

解構AI Agent: 人工智能的關鍵突破?
10.https://www.informalwriting.cc/p/demystify-ai-agents?fbclid=IwY2xjawFDHIVleHRuA2FlbQIxMQABHXYs2bUmi0-GA0UwCx4ovCOwH_ryPBMb_ouS8TOJat2v7gCBZITvrwiWSg_aem_FP3_Mu38MzLBU6SOD9neXA

如果面試官要考察你對 RAG（檢索增強生成，Retrieval-Augmented Generation）的掌握度，他可能會問以下十個問題，以全面了解你在這一領域的知識深度和應用能力：

### 1. **什麼是檢索增強生成（RAG）？它的基本工作原理是什麼？**
   - 這個問題要求你解釋 RAG 的基本概念，即如何將檢索（從大型知識庫或文件庫中提取信息）與生成（使用語言模型來生成自然語言回答）相結合，來提高回答的準確性和覆蓋範圍。

   **檢索增強生成（Retrieval-Augmented Generation, RAG）** 是一種結合信息檢索（retrieval）和自然語言生成（generation）的模型架構，旨在提高大型語言模型在問答、信息檢索等任務中的準確性和實用性。RAG 的核心思想是將外部知識源整合到生成過程中，使模型能夠生成更具信息性和真實性的回答。

### 基本工作原理

RAG 的工作原理可以分為兩個主要步驟：檢索階段和生成階段。

1. **檢索階段（Retriever Phase）**：
   - 在這個階段，RAG 使用一個檢索模型（如 Dense Passage Retrieval, DPR）來從大型知識庫中檢索出與輸入查詢相關的文本片段。這些知識庫可以是預先構建的文檔集合，例如維基百科條目、企業內部文件、法律文本等。
   - 檢索模型會根據輸入查詢生成一個向量表示，然後在知識庫中找到相似度最高的文本片段作為候選知識。

2. **生成階段（Generator Phase）**：
   - 檢索階段選出的相關文本片段被輸入到生成模型中，生成模型（通常是預訓練的Transformer架構，如BERT 或 GPT）利用這些片段來輔助回答查詢。
   - 生成模型會根據輸入的查詢和檢索到的文本片段生成最終的回答。這個階段融合了上下文信息和外部知識，使得回答更具信息性和準確性。

### RAG 的特點與優勢

- **結合檢索和生成**：RAG 結合了檢索器的精確性和生成器的靈活性。檢索器確保了模型使用真實的知識來源，而生成器則提供了自然流暢的語言表達。
- **提升回答的真實性**：通過使用實際的文本片段作為知識基礎，RAG 減少了語言模型“幻覺”（生成錯誤或虛假信息）的風險，從而提高了回答的可靠性。
- **擴展語言模型的知識範圍**：即使在語言模型的訓練數據中沒有包含特定領域的知識，RAG 仍然可以通過檢索階段從外部知識庫中提取相關信息。

### 應用場景

RAG 被廣泛應用於需要高質量信息回答的領域，如知識問答系統、技術支持服務、醫療信息查詢、法律文書分析等。通過將檢索和生成相結合，RAG 能夠在這些應用中提供詳細而準確的回答，從而提高用戶體驗和系統可靠性。

總結來說，RAG 是一種有效結合檢索和生成技術的方法，通過利用外部知識來源來增強生成過程，從而在處理複雜查詢時能夠提供更準確、更可信的答案。

### 2. **RAG 與傳統的語言模型有何區別？**
   - 解釋 RAG 如何通過結合檢索模塊來克服純生成模型的限制，例如在提供具體信息時的可靠性和細節完整性。與此相比，傳統語言模型只基於訓練數據生成回答。

**檢索增強生成（RAG）** 與傳統語言模型在設計目標、架構和信息處理方式上有顯著區別。以下是它們之間的主要不同點：

### 1. **架構組成和信息來源**

- **RAG**：RAG 是一種混合架構，結合了檢索器（retriever）和生成器（generator）。在 RAG 中，檢索器首先從一個大型外部知識庫（如維基百科、企業內部文件）中檢索與輸入查詢相關的文本片段。隨後，生成器利用這些檢索到的片段來生成最終的回答。因此，RAG 的輸出不僅依賴於模型內部的訓練參數，還依賴於外部的動態檢索過程【140†source】。

- **傳統語言模型**：傳統語言模型，如 GPT-3，主要依賴於訓練期間所學到的靜態知識，這些知識源於大型訓練數據集。輸出完全基於訓練時內化的語言模式和語義關係，而不是動態地檢索外部信息。因此，這些模型在生成回答時，可能會因為缺乏最新的或特定領域的知識而產生不準確或虛構的信息【140†source】。

### 2. **回答的真實性和準確性**

- **RAG**：由於 RAG 結合了檢索和生成，它在回答問題時可以依賴於實際的文檔內容，從而提高回答的真實性和準確性。這種方法減少了模型在提供具體信息時出現“幻覺”現象的風險，即生成虛假或不準確的答案。檢索到的相關文檔片段作為背景知識，能夠提供更具信息性的回答【140†source】。

- **傳統語言模型**：傳統語言模型的輸出基於訓練數據中的模式，因此在面對新穎問題或需要詳細背景知識的問題時，它們可能會產生不準確或不完整的回答。由於缺乏動態檢索機制，這些模型難以快速更新或適應新信息【140†source】 。

### 3. **應用場景**

- **RAG**：特別適合需要實時信息檢索的應用，如知識問答系統、技術支持、醫療資訊查詢等。在這些場景中，RAG 可以通過檢索最新的或專門領域的文檔來生成詳細且準確的回答【140†source】。

- **傳統語言模型**：適用於一般性對話生成、文本自動化生成等不依賴於特定實時信息的場景。儘管它們在多樣化語言任務中表現良好，但在回答具體事實性問題時可能不如 RAG 精確 。

### 4. **架構設計和訓練方式**

- **RAG**：包括兩個獨立但相互關聯的訓練階段，檢索器和生成器可以分別進行訓練。檢索器通常使用語義相似性技術來檢索相關文檔，而生成器則基於檢索到的內容生成回答。這種架構允許更靈活的調整和優化【140†source】。

- **傳統語言模型**：通常採用端到端的訓練方式，模型學習所有內部知識，並在生成階段直接利用這些內部知識。這種方式依賴於大量的訓練數據來涵蓋可能的知識範圍 。

### 總結

RAG 通過結合檢索和生成技術，克服了傳統語言模型在面對特定信息需求時的局限性。它可以動態地利用外部知識來生成更具信息性和真實性的回答，非常適合應用於需要準確回答的實際場景。相較之下，傳統語言模型雖然在自然語言生成方面表現優秀，但在具體事實性問題上仍然有其局限。

### 3. **RAG 模型的架構組成有哪些主要部分？**
   - 描述 RAG 模型通常包含的兩個主要組件：檢索器（Retriever）和生成器（Generator）。檢索器用於查找相關的文檔片段，生成器則基於這些片段生成最終的回答。

**檢索增強生成（RAG）** 模型的架構主要由兩個核心組成部分構成：**檢索器（Retriever）** 和 **生成器（Generator）**。這些部分相互協作，以提供更具信息性和真實性的自然語言輸出。以下是每個組成部分的詳細介紹：

### 1. **檢索器（Retriever）**

- **功能**：檢索器的主要任務是從大型知識庫或文檔集合中檢索與輸入查詢最相關的文本片段。它充當了一個過濾器，將數據庫中的大量信息縮減到少數幾個高相關性的文本，這些文本會被生成器用作輸入基礎。
  
- **技術實現**：常用的檢索方法包括基於密集向量的檢索（如 Dense Passage Retrieval, DPR），這種方法利用語義嵌入技術來衡量文本與查詢之間的相似性。相比傳統的關鍵字檢索方法（如 BM25），密集向量檢索可以更好地捕捉語義相似度【140†source】。

- **工作流程**：當接收到用戶查詢時，檢索器將查詢轉換為向量表示，然後在已索引的知識庫中尋找相似度最高的文本片段。這些片段將作為上下文信息被傳遞給生成器。

### 2. **生成器（Generator）**

- **功能**：生成器的任務是根據檢索器提供的文本片段來生成最終的回答。生成器是預訓練的語言模型（如 BERT 或 GPT），它利用檢索到的文本片段提供更具體和詳實的回答。

- **技術實現**：生成器使用自注意力機制（self-attention）來結合查詢與檢索片段的上下文信息，然後生成一個連貫的自然語言回答。生成器不僅考慮檢索文本的內容，還利用其內在的語言生成能力來形成自然且連貫的表達【140†source】【140†source】。

- **工作流程**：生成器接收查詢和檢索到的文本片段，並在其內部的注意力層之間傳播這些信息。最終生成的文本是根據檢索內容和查詢的融合，這保證了輸出既具有上下文相關性，又能夠保持自然語言的流暢性。

### 3. **整體工作流程**

- **初始階段**：用戶向模型輸入一個查詢。檢索器將這個查詢轉換成一個向量，然後在知識庫中檢索與之最相似的文本片段。這些片段被認為是與查詢最相關的內容。

- **生成階段**：生成器接收檢索片段和原始查詢作為輸入，使用這些信息來生成最終的回答。生成器結合檢索到的知識和語言模型自身的生成能力，以產生高質量的輸出。

- **輸出階段**：最終生成的回答返回給用戶，通常帶有較高的真實性和細節性，這是因為回答基於檢索到的真實文本片段，而不是完全依賴於內部的模型參數。

### 結論

RAG 的架構設計充分利用了檢索和生成的優勢，使得模型能夠同時保持高信息性和語言自然性。這種結合方式特別適合於需要準確回答問題的場景，如知識問答系統、技術支持和法律諮詢等。通過分離檢索和生成過程，RAG 提供了一個靈活且高效的框架來應對複雜的查詢需求。

### 4. **如何選擇和優化 RAG 中的檢索器？有哪些常見的檢索策略？**
   - 討論不同類型的檢索器（如 BM25、Dense Passage Retrieval 等）及其優勢。解釋如何根據具體應用場景選擇合適的檢索方法，以及如何通過調整超參數來優化檢索性能。

選擇和優化 RAG（檢索增強生成）模型中的檢索器是提高模型性能的關鍵步驟。檢索器的主要任務是從大型知識庫中提取與查詢相關的文本片段，以便生成器能夠利用這些片段生成高質量的回答。以下是一些選擇和優化檢索器的策略，以及常見的檢索方法：

### 1. **選擇檢索器的策略**

- **基於任務需求**：根據具體的應用場景選擇合適的檢索器。例如，如果應用需要快速且輕量級的檢索，可以考慮使用傳統的關鍵字檢索方法；而對於需要語義理解的應用場景，如問答系統，可以使用基於密集向量的檢索方法。

- **語義檢索 vs. 關鍵字檢索**：語義檢索（如使用向量嵌入的 Dense Passage Retrieval, DPR）能夠更好地捕捉文本的語義相似性，適合於處理自然語言查詢。關鍵字檢索（如 BM25）則依賴於詞頻和逆文檔頻率，適合於結構化的查詢【140†source】。

- **資源考量**：考慮計算資源的可用性。密集向量檢索通常需要更多的計算和存儲資源，但可以提供更高的語義準確性。相對簡單的檢索方法如 BM25 雖然速度快、資源佔用少，但在語義相似性方面可能不如密集檢索精確【140†source】。

### 2. **優化檢索器的策略**

- **向量化技術**：使用預訓練的語義嵌入模型（如 BERT）將查詢和文檔片段轉換為向量表示。這些向量嵌入應盡可能捕捉到語義信息，以提高檢索的相關性。
  - **訓練專用檢索嵌入**：可以針對特定應用場景微調語義嵌入模型，使其能更好地識別相關文本片段。

- **索引和檢索速度優化**：在處理大規模知識庫時，建立有效的索引結構（如倒排索引或向量索引）以加速檢索過程。可以使用工具如 FAISS 或 Annoy 來實現快速向量檢索，確保在大規模數據集上保持檢索效率【140†source】。

- **檢索範圍調整**：根據具體查詢的複雜性，調整檢索器的查詢範圍和深度。例如，對於簡單的查詢，可以設置較低的檢索範圍；對於複雜查詢，則可以增大檢索範圍以獲取更多相關片段。

### 3. **常見的檢索策略**

- **BM25**：這是一種基於詞頻和逆文檔頻率的傳統檢索方法。BM25 對於簡單的關鍵字匹配非常有效，具有計算效率高的特點，適合用於基礎檢索器或與語義檢索結合使用【140†source】。

- **Dense Passage Retrieval (DPR)**：DPR 使用雙塔架構，分別訓練查詢和文檔的語義嵌入模型。DPR 可以有效捕捉查詢和文檔之間的語義相似性，非常適合用於問答系統中。DPR 通常通過基於訓練數據的微調來增強檢索效果【140†source】。

- **ColBERT**：ColBERT 是一種基於 BERT 的高效密集檢索方法，利用上下文感知的詞嵌入進行精確匹配。它將檢索過程細化到單詞級別，能夠更精細地處理語義關聯【140†source】。

- **Hybrid Retrieval**：混合檢索方法結合了傳統關鍵字檢索和語義檢索的優點。例如，可以首先使用 BM25 篩選出一批候選文檔，然後使用語義檢索器（如 DPR）進行精細排名。這種方法既能保證檢索速度，也能提高語義準確性【140†source】。

### 總結

選擇和優化 RAG 中的檢索器涉及理解應用需求、平衡速度與準確性、並使用適當的索引和向量化技術。通過結合不同的檢索策略，可以設計出一個高效且精確的 RAG 系統，從而在複雜查詢場景中提供高質量的答案。

### 5. **RAG 模型如何處理長文本檢索？它的上下文窗口限制如何解決？**
   - 探討 RAG 處理長文本檢索的策略，例如分段檢索、滑動窗口技術，或使用更大上下文窗口的生成模型。解釋這些策略如何有效處理和回答需要多段上下文的複雜問題。

   在處理長文本檢索和解決上下文窗口限制方面，RAG（檢索增強生成）模型採用了多種技術和策略，以確保能夠有效地從大量文本中檢索和利用相關信息來生成高質量的回答。以下是 RAG 模型如何處理這些挑戰的方法：

### 1. **文本分割和分段檢索**

- **分段策略**：當面對長文本時，RAG 模型可以將文檔分割成較小的片段（例如每段或每句話），然後對這些片段進行獨立檢索。這樣可以確保檢索器能夠在較小的上下文範圍內找到與查詢高度相關的內容，從而提高檢索效率。
  - **示例**：在處理一本書或長篇文章時，RAG 模型會將文本分成段落或句子，然後對這些片段建立索引。當用戶提出查詢時，模型僅檢索相關片段而非整個文檔【140†source】。

### 2. **滑動窗口技術**

- **滑動窗口**：這種技術通過在長文本中應用固定大小的窗口來捕捉不同的文本片段。滑動窗口逐步移動以覆蓋整個文檔，從而在不同的窗口中檢索相關信息。這有助於模型捕捉到完整的上下文，即使信息分佈在較長的文本中。
  - **應用場景**：對於長度超過生成器上下文窗口限制的文檔，使用滑動窗口技術可以保證不遺漏任何有價值的內容【140†source】。

### 3. **上下文窗口增強技術**

- **更大的上下文窗口**：使用具備更大上下文窗口的生成模型，如 GPT-4 Turbo，其上下文窗口達到 128K tokens，可以有效處理非常長的文本片段而不丟失上下文信息【119†source】。
- **段落優先檢索**：首先檢索出與查詢最相關的段落或片段，然後根據需要在這些片段周圍的上下文中進行進一步檢索，以保證生成器有足夠的上下文信息來生成準確的回答。

### 4. **層次化檢索方法**

- **分層檢索**：這種方法先進行粗粒度檢索，找到與查詢相關的大範圍文本（如章節），然後在這些範圍內進行更精細的檢索（如段落或句子）。這樣可以提高檢索的效率，同時確保生成器能獲得足夠的細節信息。
  - **應用實例**：在法律文本查詢中，RAG 模型可能先定位到相關的法規或章節，然後進一步檢索具體條款或案例段落【140†source】。

### 5. **檢索器與生成器的聯合調整**

- **動態調整檢索結果**：根據生成器的需要，調整檢索器的結果數量和質量。例如，如果生成器發現初始檢索片段不足以回答查詢，RAG 可以自適應地調整檢索策略以檢索更多或不同的片段。
  - **實施方法**：使用增強學習技術，使檢索器和生成器在反饋回路中協同工作，動態優化檢索結果【140†source】。

### 6. **知識聚合與排序**

- **檢索結果排序**：對於檢索到的多個片段，RAG 可以使用排序算法根據與查詢的相關性對片段進行排序。只選取前幾個最相關的片段進行生成，這樣可以在不增加太多計算成本的情況下提高回答的準確性。
  - **知識聚合**：將來自不同片段的信息整合在一起，生成一個連貫且信息豐富的回答【140†source】。

### 結論

RAG 模型通過使用文本分割、滑動窗口、大上下文窗口、層次化檢索、聯合調整檢索結果、知識聚合與排序等技術，有效解決了長文本檢索和上下文窗口限制的挑戰。這些方法確保 RAG 能夠處理長篇文檔並提供精確、相關的回答，在複雜信息檢索任務中表現出色。

### 6. **RAG 的訓練流程是怎樣的？**
   - 解釋 RAG 的訓練包括哪些步驟，例如如何同步訓練檢索器和生成器，使用什麼樣的損失函數（如交叉熵損失和檢索損失），以及如何在訓練過程中利用人類反饋進行調整。

### 7. **如何評估 RAG 模型的性能？常用的評估指標有哪些？**
   - 討論 RAG 模型的性能評估指標，如精確度（Precision）、召回率（Recall）、F1 分數、BLEU 分數、ROUGE 分數等。說明如何使用這些指標來評估模型的檢索和生成能力。

### 8. **RAG 在實際應用中有哪些挑戰和局限性？如何克服這些挑戰？**
   - 提出 RAG 在實際應用中面臨的挑戰，如檢索器和生成器的聯合調優、處理多語言環境、實時性能等。討論可能的解決方案，例如使用增強學習、自適應微調等技術。

### 9. **RAG 模型如何確保生成內容的真實性和準確性？**
   - 解釋 RAG 模型如何通過結合檢索模塊來引入真實信息，減少生成虛假內容的風險。討論使用檢索結果作為生成內容的基礎的好處，以及如何進一步校驗生成結果的真實性。

### 10. **RAG 在哪些應用場景中特別有優勢？能舉例說明一些具體應用嗎？**
   - 描述 RAG 在知識問答、技術支持、醫療診斷、法律諮詢等領域的應用。舉例說明如何通過結合檢索和生成來提供詳細而準確的回答。

這些問題涵蓋了 RAG 的基本概念、技術細節、應用場景和挑戰，能夠全面考察你對 RAG 的理解和應用能力。準備回答這些問題將有助於展示你在這一領域的專業知識和實際操作經驗。

RAG (Retrieval Augmented Generation): 為自然語言處理揭開新篇章
https://medium.com/@cch.chichieh/rag-retrieval-augmented-generation-%E7%82%BA%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80%E8%99%95%E7%90%86%E6%8F%AD%E9%96%8B%E6%96%B0%E7%AF%87%E7%AB%A0-fced76fdb8b9